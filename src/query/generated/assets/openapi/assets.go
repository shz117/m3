// Code generated by "esc -modtime 12345 -prefix openapi/ -pkg openapi -ignore .go -o openapi/assets.go ."; DO NOT EDIT.

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/asset-gen.sh": {
		local:   "asset-gen.sh",
		size:    238,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0zKz0rEMBDH8Xue4rfTnBbSsP45LR5EfAHrTUTWdpIO0hlJIgjiu0sr6M5l4PP9dbv4
Khrr7NztMNw/vgwPdzf+4JIVCERB/s8p7o+YzAGAJOzwhDDBC56PaDPrFtYbTZvoB2+QxG2fx9lAmZXL
qYlmpGILvNBvrSPCYlOThUGHi8ura0J4L5zkE+S/pOv28Tuu9pb/gRAkqxVGnw3BzqanWrnVPhuBenKT
KbufAAAA//9BiTev7gAAAA==
`,
	},

	"/index.html": {
		local:   "openapi/index.html",
		size:    636,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0ySQW/bMAyF7/kVjC+9RJaHDtiQyd6wpceuQ9DLblUk2lYrS55IpzC2/ffBUdLlRr4n
fXwgqNa7h2+PP3/cQc+Db1ZqLcTq+8Pj3Rb2U4CnQb8gaCJk0WEQvyZM8xO4FuY4QTbDDKbXoUMCjsC9
I2idx/VKiGalMhZA9ajtUgAoduyxub/dfYU97qJRMivZHZD1QkyEXBcTt+JjIa+9oAesi6PD1zEmLsDE
wBi4Ll6d5b62eHQGxanZgAuOnfaCjPZYvyvOIO/CC/QJ27romUfaStnGwFR2MXYe9eioNHGQhuhzqwfn
5/p+8TElzdvbqtq8r6rNh6r6s4+HyPFaKiChrwvi2SP1iHwZelJyDXCIdobf5wZg0KlzYQvVpzdp1Na6
0F1pfzNHvoGUvKxVLbzznIQ2GqARjZiSr2/iiEGPThJrdkYuRjkP/qZR8vT0Es8kNzJQMv+XYmwon8mi
d8dUBmQZxiF/+uI1I7E8TMF6pCyWxDpY7WPA8pmKZsl6ouawOaOS+Sj+BQAA//8by2IcfAIAAA==
`,
	},

	"/spec.yml": {
		local:   "openapi/spec.yml",
<<<<<<< HEAD
		size:    23348,
		modtime: 12345,
		compressed: `
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
/Qh2rnr/CwAA///HYqvpNFsAAA==
=======
		size:    21761,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/+xcX2/jNhJ/96dgtfdwfUiUTfZ6gN+cP80ayHoNJ+jhWhxQWhzJbCVSS46SzRb33QtK
sixZikXZzp815Jc44nDImflxfkNK8jsy+Xx3NSSzRJDfI/onEKo14FEA4uhLAurxd8J98igTkjWKR+It
qAhAE5QEF1wTn4fww0A/0CAANSTO6fGJM+DCl8MBIcgxhCFxPp1dnjsDQhhoT/EYuRRD4owI4xoVnycI
jCCPgGhQHDRhFOmcaiCJ5iIgn87ubn8lfigp/vSBeDKKFWjNpTgm/5UJ8aggPheMyARJJBUQOjdfzaiE
IvltgRgPXTc6Y/PjgOMimR9z6UZn7v/++WTTj0QqIgX57Zrjx2SeSeqh6+ZSnozSXm509uOxse0elM7s
en98YpxAiCcFUg+NJwgRNMpccX5JrqUMQiDXSiaxk7YmKhwSpxjDNOjjIBVLh/KlSiL33Q/ZXzOw6Rdy
D4SGygCjmHoLIDdZEznNplIboWaFOw/l3I2oRlDuzfjianJ75QwWUqPpJjWm+v99evLeGZjYTCkuhsRx
aczd+/fOAGmgh4OjlZ2X52RCI9Ax9aAe/AspfB4kKovv5XnaL5XVzpqWaUg9iECghZZ4KVvVMgoCBQFF
qey1lfo8ofXynFzmSK0rqzQfPXAGxE+EZ1q1M9DeAiJIHZbGxBnEFBfaRNLVoO65BzqLTOGXLMoB5Hgi
JPM4yT9HTT6vNC0v6CSKqHocEucasO78TEjGoKiZ7JgNiVO0XwMuJTwpdJLaUIxC4zjkXtrN/UNLsRSN
lWSJZyWqQMdSaChZdnpysvpn3c1OqSV1Ki3LEvIPBf6QOO9cBj4XPHW/OymZM8sHXCn6cPJhz+NdgwDF
vSulpFop+Nfe7aqPE5v124CXJ9HyJFZGjBEq1uDSgpYRY8+LlpgqGgGCKgnny3Mu2ePKiVzULtW9uhkr
I8Zm8CUBjW8KqycHgtWn0p77V/F1fPn/TDGDEBD2g+vLVFdnaGfdXg3dJZ+sgdzwyOqSgi8JV8CGBFUC
xWV8jI0WU32J4EXhnPktZVoVpSa/PJgPJ8GvLZqiTtlYKxw11VWtdQIuYK3Eal4hRfNhlArTkjn19PsW
KNw+jDmFc6GRCg+yPRxYB/QQ2HxaMuY12HwznA6HzW042h64OUd3TkFZv1EYHkAi2kScL0s0npSKcWF2
xl0Y52LV7YnQlyQ2cVBZUU9Gb4iMdoxwT089Pb0VetoRyhXC2iZf9cz1HMxFiyPdLsT11OFxg8Am2hoF
QVv4IyPUc9ZLctZOwS3ORE1sO/JWNdY9efXktTfy2gnTFeqyzVnTnrde6mjPNT2Gez4ZGptZ0JB/22KT
bfoeTu4y1vTJ6xVgrSD9vm9kzzK1xf2dgqW56LS7zPUcDtBzg3qsv+KhmW0u33E3Wsvu2+xIDzbNNzqv
Xwcvug7sk/+OS6FCBw2SffbvUf9CB0+2yX+n3Vwt9Xfe0fXlfQ/6PYLePtPvhPtKnq8LbgJ8n+t72O9t
V/vXcr/Z4dnFzs9F1Pa2vpJRp93tKz/NuHLS9/UwY1/Ab43z/dxgXS/j+yXQL4FXKmw6r4B93KWp33y0
xX1qxbQHfw/+7uXN8vVM11NA0fLIvvym3MaiZvkWHuisqnnguCCR1EhkapQmDHyahAisGdrL6V2ks/vu
6/jLijmvUcWvz+BQgV5qMX0b3vzKVOYJR87/AC+PRKwMBpGvApGiYHOOyvG8ktr8AtjnOH95tDS1z2UV
VvOaS4kaFY2vBJ2HwGpznEsZAi0Q7oeJXljKPiiOoO/khYwijjcyaOvgmX8S26koiClX1sIIwjjns5WX
Z2viRV4SNNYLiZajcsHgq92I45LoKkmF7D+pEy3GmzVaaAWCwjlTUFyyCRVS14biAiGA0vrzpYooZi0/
fSgAkmCiYLZHjfNQen/e8m+wm5bE90H9nM5uD4qmVOPuVplUevU15uqxDUlr4iMfQU0kjjwPtN7RyeMa
Sq1QA3ZrYPfwNb3z2gndAddYdvHmxDrL5StDzypKrFN+9hZ9zehyR/OhjKWzoOG0pqYTE9QfUuow4WyH
sjGgTSVuhxHWHrNtr6SXLlr+nEYn9JydVqbcYZ7LHcgzRW6cqy8xmSknf6YeStVmo0ii2wVVrHUpcZ3K
ta9QL0F5D+qON5QoltmM60/cVE3tg0X0azqtW8Ax2zTc0kldwsZaSiyuZZiuivS3VlqEv0nRVrI9AA8W
2OY0ECyWXGCLMt0cVaoULe8cEKJ2hKUurihu9bf5FD/ssnmmsVRoE7ruZfL3HcHncV/lSHOfvrRwz8sa
nqJ2NwvXAqeRIrSQTZaOsHQ4oGWiPBi3+S/PmzuVgUaH72+tYjX3itvK8wSRRFnjEXHGk/HdeHQz/nU8
uXaWF0e/jMY3o/Obq+LKzdXol1yi4TH+vRDpVmltbWUUew6pPLAqW0o3/N+cFdbE3lTllMoIM4hdKbGx
XKreJ+7grRDoPRfBuDjF7e625uVGBeOM4lsE09Y5+tmRVT7T6rK5W8k3BqTxGHKbzdGknTbSi5tFymku
z2Gh9GhY+dUzL0w0blFIP+t6q5y/NJbgVUuL7XQLq50v5cocvSeYfZQZts6rc7EKPLabCF9j8BDYbfrz
jwZpaQ2ip6A+ykRtw5Mf5X7LUMqYAq13rHdesaDdv4ubbwtskxJsD2oabrN1PmCo6Pg7AAD//8oTwvAB
VQAA
>>>>>>> Future retention
`,
	},

	"/": {
		isDir: true,
		local: "openapi",
	},
}
