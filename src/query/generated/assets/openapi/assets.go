// Code generated by "esc -modtime 12345 -prefix openapi/ -pkg openapi -ignore .go -o openapi/assets.go ."; DO NOT EDIT.

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/asset-gen.sh": {
		local:   "asset-gen.sh",
		size:    238,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0zKz0rEMBDH8Xue4rfTnBbSsP45LR5EfAHrTUTWdpIO0hlJIgjiu0sr6M5l4PP9dbv4
Khrr7NztMNw/vgwPdzf+4JIVCERB/s8p7o+YzAGAJOzwhDDBC56PaDPrFtYbTZvoB2+QxG2fx9lAmZXL
qYlmpGILvNBvrSPCYlOThUGHi8ura0J4L5zkE+S/pOv28Tuu9pb/gRAkqxVGnw3BzqanWrnVPhuBenKT
KbufAAAA//9BiTev7gAAAA==
`,
	},

	"/index.html": {
		local:   "openapi/index.html",
		size:    636,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/0ySQW/bMAyF7/kVjC+9RJaHDtiQyd6wpceuQ9DLblUk2lYrS55IpzC2/ffBUdLlRr4n
fXwgqNa7h2+PP3/cQc+Db1ZqLcTq+8Pj3Rb2U4CnQb8gaCJk0WEQvyZM8xO4FuY4QTbDDKbXoUMCjsC9
I2idx/VKiGalMhZA9ajtUgAoduyxub/dfYU97qJRMivZHZD1QkyEXBcTt+JjIa+9oAesi6PD1zEmLsDE
wBi4Ll6d5b62eHQGxanZgAuOnfaCjPZYvyvOIO/CC/QJ27romUfaStnGwFR2MXYe9eioNHGQhuhzqwfn
5/p+8TElzdvbqtq8r6rNh6r6s4+HyPFaKiChrwvi2SP1iHwZelJyDXCIdobf5wZg0KlzYQvVpzdp1Na6
0F1pfzNHvoGUvKxVLbzznIQ2GqARjZiSr2/iiEGPThJrdkYuRjkP/qZR8vT0Es8kNzJQMv+XYmwon8mi
d8dUBmQZxiF/+uI1I7E8TMF6pCyWxDpY7WPA8pmKZsl6ouawOaOS+Sj+BQAA//8by2IcfAIAAA==
`,
	},

	"/spec.yml": {
		local:   "openapi/spec.yml",
		size:    23479,
		modtime: 12345,
		compressed: `
H4sIAAAAAAAC/+xcW2/jNhZ+969g1X3YApsok8x2Ab85cZoxkMkYTtDFtligtHgks5VIDUkl4yn2vy9I
ybJkKRZlK07GVV6SiIeH5/KdC6nL9+ju08P1EM0Shn6L8B+AsJSgTgJgJ58TEMvfEPXRkicoHWRL5C0w
C0AixZFaUIl8GsJ3A/mEgwDEEDnnp2fOgDKfDwcIKapCGCLn48X40hkgREB6gsaKcjZEzggRKpWg80QB
QYpGgCQIChIRrPAcS0CJpCxAHy8e7n9Bfsix+vE98ngUC5CScnaK/sMT5GGGfMoI4olCEReA8Fz/qVdF
WKFfF0rFQ9eNLsj8NKBqkcxPKXejC/e/f3926AfEBeIM/XpD1YdknlLKoetmVB6PzCw3uvjhVOv2CEKm
er07PdNGQMjjTGFPaUsgxHCUmuJyjG44D0JAN4InsWNGExEOkZOvoQfkaWDIzFI+F0nkfv9d+lsvrOeF
1AMmobTAKMbeAtBtOoTOU1EqK1S0cOchn7sRlgqEezu5ur67v3YGCy6VnsalMvz/dX72zhlo30yxWgyR
4+KYuo/vnIHCgRwOTtZ6ji/RHY5AxtiDqvOvOPNpkIjUv+NLM8/QSmeDyzTEHkTAlAWXeEVb5jIKAgEB
VlzYcyvMeYbr+BKNM6RWmZWGT54oAeQnzNOj0hlIbwERGIMZnziDGKuF1J50JYhH6oFMPZPbJfVyABme
EEotjrKfkzqbl4ZWF2QSRVgsh8i5AVU1fkrEYxBYCzshQ+Tk4zegVhQeZzIxOuSr4DgOqWemub9Lzlak
seAk8axIBciYMwkFzc7Pztb/bJrZKYwYo+IiLUJ/E+APkfO9S8CnjBrzu3cFdWbZgmtG78/ed7zeDTAQ
1LsWgos1g392rld1nVjHbw1enkXLs1gZEYIw24BLA1pGhLwsWmIscAQKRIE4C885J8u1ESmrXKpadTtW
RoTM4HMCUr0prJ4dCVafS3vun/mfk/H/UsYEQlDQDa7HhldraKfTXg3dBZtsgFzXkfUlAZ8TKoAMkRIJ
5JfVMtZcdPfFgoPCObWbqbQiMiofHszHk+A3gibvU7b2Cid1fVVjn6AWsNFi1UdIPnwcrcK0oE41/b6F
Em7vxqyEUyYVZh6keziwdugxVPNpQZnXqObb4XQ81dymRtsDN6vRrVNQOm8UhkeQiLYVzsMWGo9zQSjT
O+M2FedqPe0Z1xcottWgIqO+GL2hYrSnh/vy1Jent1Ke9oRyqWDtkq/6yvUSlQvnR7ptCtdzh8c1BNvK
1igImtwfaaK+Zh2yZu3l3PxMVPu2Zd0q+7ovXn3x6qx47YXpUumyzVnTvm4d6mjP1TOGHZ8MTbQUOKRf
d9hk67nHk7u0Nn3yegVYCzB/d43sWco2v7+TV2nKWu0uMz7HA/RMoR7rr3hoZpvL99yNVrL7LjvSo03z
tcbr4+CgcWCf/PcMhVI5qKHss3+P+gMdPNkm/712c5XU33pH17f3Peg7BL19pt8L96U8XyXcBvg+1/ew
72xX++dqv9ni2cXWz0VU9ra+4FGr3e0rP824NtK39TBj38DvjPNubrButvF9CPQh8EqNTesI6OIuTfXm
oy3ujRbTHvw9+Nu3N6vXM11PAFaWR/bFN+W2NjWrt/BApl3NE1ULFHGpEDdKSUTAx0mogNRDeyXelZHu
m+/jxyV1XqOL35TgLwh0g0l3zrmSSuA4zh3eGezHS4Yj6uEwXCL+CEJQkp7ZlBZF3io6CKJp2y8R4wRO
QniEMB8u3a5+JjwM6T2oy+ICxxMuRr1a3Q4bNM/LcVwPpTS8bWQdCDNQgsJjCn5SiIoC9MsxsQqXfyDq
I8yWNri/OSju/3qI2/qOHeMK+TxhRDtM/yPXjzp+A2gvjOi5NW8IpyyzxpTPfwcv0y8WGpSKrpFg0t/2
Xjbre9ZU218U/hRnHxkoiPapyMJKrjzErhmeh0AqMs45DwHnEPfDRC4saZ8EVSAf+BWPIqpuedA0wdP/
JLaiCIgxFdbECpg2zicrK882yPP8xXAsF1xZrkoZgS92K04KpOssFZJ/GyNarDer1dAKBLlxpiAoJ3eY
cVlZijIFARTiz+ciwiod+fF9DpBEJQJmHXKch9z7455+hf24JL4P4icjXQeMpliq/bXSufz6S0zFsglJ
G+QjX4G442rkeSDlnkaeVFBqhRqwi4H93Vf3bYRW6A6oVEUTb0+ss4y+tPSsxMQ65adfW6koXZyofzAh
RgocTitsWlWC6sOsLQROT7K2OrTuKKTFChuvYzSfuKxMtPrsUiv0XJyXRG4h5+qk6oU8N8nYFyqZ7id/
wp7ioklHlkT3CyxIYyhRaeiaI9RLlO6tH2hNi2KZzaj8SHXX1LxYhL8Yse5BTci25VZGauM20tBiUclD
ExXmm1wNxF85a2rZnoAGC9VkNGAk5pSpBmay3qtYCFzcMiuImhFmTFxi3Ghv/ZN/AGy7pDEXysZ17dvk
b9uDL2O+0q2vLm1pYZ7DKm5Qu5+GG46TCitoKDZpOlKFQ2TJE+HBpMl+Wd7cqw3UPHx/ZxZr2UtmK8oJ
LInSwRPkTO4mD5PR7eSXyd2Ns7o4+nk0uR1d3l7nV26vRz9nFDWve3VSSHdKaxuRke85uPDAqm0pPBj2
5rSwLux1XU6hjdCL2LUSW9ul8vNELawVAn6kLJjkd/vam60+3DAjlGD1FsG0c45+cWQVz7TabO7W9LUO
qb1dtcvm6K65bJiL20mKaS7LYSH3cFj6OqYXJlLt0Ei/aLyVzl9qW/Cypvl2uqGqXa7oijW6I5h94Cm2
LsuyWDleNasIX2LwFJB785lgjTTTg8gpiA88EbvUyQ+82zYUEyJAyj37nVdsaLs3cf3t411Sgu1BTc3j
GK0PGDZ4bLm50kKTRxwmsHfV+38AAAD//67u5JS3WwAA
`,
	},

	"/": {
		isDir: true,
		local: "openapi",
	},
}
